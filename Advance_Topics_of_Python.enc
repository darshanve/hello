{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Shallow and Deep Copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1881852500936\n",
      "1881852500616\n",
      "1881852500936\n",
      "[1, 2, 3, 4, 6]\n",
      "[1, 2, 3, 4, 6]\n",
      "[1, 2, 3, 4]\n",
      "[1, 2, 'hello', 4, 6]\n",
      "[1, 2, 'hello', 4, 6]\n",
      "[1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "l = [ 1,2,3,4]\n",
    "x = l\n",
    "y = [1,2,3,4]\n",
    "print(id(x))\n",
    "print(id(y))\n",
    "print(id(l))\n",
    "l.append(6)\n",
    "print(l)\n",
    "print(x)\n",
    "print(y)\n",
    "l[2] = 'hello'\n",
    "print(l)\n",
    "print(x)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l =  [[1, 2], [3, 4], [5, 6]]\n",
      "l =  [[1, 2], [3, 4], [5, 6], [8, 9]]\n",
      "x =  [[1, 2], [3, 4], [5, 6]]\n",
      "l =  [[1, 'hello'], [3, 4], [5, 6], [8, 9]]\n",
      "x =  [[1, 'hello'], [3, 4], [5, 6]]\n"
     ]
    }
   ],
   "source": [
    "l = [ [1,2],[3,4],[5,6]]\n",
    "x = l.copy()\n",
    "print(\"l = \",l)\n",
    "l.append([8,9])\n",
    "print(\"l = \",l)\n",
    "print(\"x = \",x)\n",
    "l[0][1] = 'hello'\n",
    "print(\"l = \",l)\n",
    "print(\"x = \",x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original : [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
      "Shallow : [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
      "Deep : [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
      "Original : [[1, 2, 3], [4, 'Five', 6], [7, 8, 9], ['hello', 'hi']]\n",
      "Shallow : [[1, 2, 3], [4, 'Five', 6], [7, 8, 9]]\n",
      "Deep : [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n"
     ]
    }
   ],
   "source": [
    "import copy\n",
    "original_list = [ \n",
    "        [1,2,3],\n",
    "        [4,5,6],\n",
    "        [7,8,9],\n",
    "    ]\n",
    "shallow_list = copy.copy(original_list)\n",
    "deep_list = copy.deepcopy(original_list)\n",
    "print(\"Original : {}\".format(original_list))\n",
    "print(\"Shallow : {}\".format(shallow_list))\n",
    "print(\"Deep : {}\".format(deep_list))\n",
    "original_list.append(['hello','hi'])\n",
    "original_list[1][1] = 'Five'\n",
    "print(\"Original : {}\".format(original_list))\n",
    "print(\"Shallow : {}\".format(shallow_list))\n",
    "print(\"Deep : {}\".format(deep_list))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Closure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World  Sachin\n"
     ]
    }
   ],
   "source": [
    "#Nested Functions \n",
    "def hello(msg):\n",
    "    def hi():\n",
    "        print(\"Hello World \",msg) # Non local can be access under local \n",
    "    hi()\n",
    "hello(\"Sachin\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World! Sachin\n"
     ]
    }
   ],
   "source": [
    "#Nested Functions\n",
    "#unlocal scope\n",
    "def hello(msg):\n",
    "    #nonlocal scope\n",
    "    def hi():\n",
    "        #local scope\n",
    "        #msg = \"Hello World! \"+str(msg) #Error! beacuse nonlocal can not be modified\n",
    "        nonlocal msg\n",
    "        msg = \"Hello World! \"+msg\n",
    "        print(msg)\n",
    "    hi()\n",
    "hello(\"Sachin\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World!  Python\n"
     ]
    }
   ],
   "source": [
    "#Closure\n",
    "def hello(msg):\n",
    "    def hi():\n",
    "        print(\"Hello World! \",msg)\n",
    "    return hi\n",
    "\n",
    "new = hello(\"Python\")\n",
    "del hello\n",
    "new()\n",
    "#dir(new)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your name : sachin\n",
      "**************************************************\n",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n",
      "Hello,  sachin\n",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n",
      "**************************************************\n"
     ]
    }
   ],
   "source": [
    "#Decorator\n",
    "def Hello(func):\n",
    "    def inner(*name):\n",
    "        print(\"*\"*50)\n",
    "        func(*name)\n",
    "        print(\"*\"*50)\n",
    "    return inner\n",
    "def Hi(func):\n",
    "    def inner(*name):\n",
    "        print(\"%\"*50)\n",
    "        func(*name)\n",
    "        print(\"%\"*50)\n",
    "    return inner\n",
    "@Hello\n",
    "@Hi\n",
    "def say_hello(name):\n",
    "    print(\"Hello, \",name)\n",
    "  \n",
    "say_hello(input(\"Enter your name : \"))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter x : 105\n",
      "Enter y : 206\n",
      "**************************************************\n",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n",
      "X =  105\n",
      "Y =  206\n",
      "X + Y =  311\n",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n",
      "**************************************************\n"
     ]
    }
   ],
   "source": [
    "@Hello\n",
    "@Hi\n",
    "def add(x,y):\n",
    "    print(\"X = \",x)\n",
    "    print(\"Y = \",y)\n",
    "    print(\"X + Y = \",x+y)\n",
    "    \n",
    "add(int(input(\"Enter x : \")),int(input(\"Enter y : \")))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, \n"
     ]
    }
   ],
   "source": [
    "#Infinite Iterator\n",
    "class Infinite_Number:\n",
    "    def __iter__(self):\n",
    "        self.n = 0 #initilization\n",
    "        return self\n",
    "    def __next__(self):\n",
    "        self.n = self.n+1  #iteration\n",
    "        return self.n\n",
    "num = Infinite_Number()\n",
    "num = iter(num) #Initilizing iteratior value n to 1\n",
    "for var in range(200):\n",
    "    x = next(num) #Will Give Next Value by adding 1 in previous value\n",
    "    print(x,end=', ')\n",
    "print()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, \n"
     ]
    }
   ],
   "source": [
    "for var in range(300):\n",
    "    x = next(num)\n",
    "    print(x,end=', ')\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#iterator\n",
    "class Num_Pow:\n",
    "    def __init__(self,num,max_power):\n",
    "        self.num = num\n",
    "        self.max_power = max_power\n",
    "    def __iter__(self):\n",
    "        self.pow = 0\n",
    "        return self\n",
    "    def __next__(self):\n",
    "        self.pow += 1\n",
    "        if self.pow <= self.max_power:\n",
    "            return self.num**self.pow\n",
    "        else :\n",
    "            raise StopIteration(\"Max power Achieved\")\n",
    "\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Number : 13\n",
      "Enter Max Power : 10\n",
      "13, 169, 2197, 28561, 371293, 4826809, 62748517, 815730721, 10604499373, 137858491849, \n",
      "Error!! Max power Achieved\n"
     ]
    }
   ],
   "source": [
    "n = int(input(\"Enter Number : \"))\n",
    "m = int(input(\"Enter Max Power : \"))\n",
    "x = Num_Pow(n,m)\n",
    "x = iter(x)\n",
    "for var in range(m+1):\n",
    "    try :\n",
    "        print(next(x),end=', ')\n",
    "    except StopIteration as arg:\n",
    "        print(\"\\nError!!\",arg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number : 3\n",
      "Max Power : 6\n",
      "3\t9\t27\t81\t243\t729\tError!!Generator Stops Here\n"
     ]
    }
   ],
   "source": [
    "#Generator \n",
    "def PowNum(num,max_power):\n",
    "    power = 1\n",
    "    while power <= max_power :\n",
    "        yield num**power\n",
    "        power += 1\n",
    "n = int(input(\"Number : \"))\n",
    "m = int(input(\"Max Power : \"))\n",
    "x = PowNum(n,m)\n",
    "for var in range(m+1):\n",
    "    try :\n",
    "        r = next(x)\n",
    "        print(r,end='\\t')\n",
    "    except StopIteration:\n",
    "        print(\"Error!!Generator Stops Here\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
